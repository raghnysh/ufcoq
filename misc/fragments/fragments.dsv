qolnxg6aFunctionCodomainsrc/base/construct.v (lines 35-41)Definition FunctionCodomain\n  : forall (X : Type) (F : X -> Type),\n      (forall (x : X), F x) -> X -> TypeArguments FunctionCodomain {X} {F} _ _.
yrbfo0qaFunctionDomainsrc/base/construct.v (lines 27-31)Definition FunctionDomain\n  : forall (X : Type) (F : X -> Type), (forall (x : X), F x) -> TypeArguments FunctionDomain {X} {F} _.
b5b085qnKindsrc/base/construct.v (lines 16-19)Definition Kind : forall (X : Type), X -> TypeArguments Kind {X} _.
d0923l5sPairFamilysrc/base/construct.v (lines 347-352)Definition PairFamily\n  : forall (T : Type), (T -> Type) -> (T -> Type) -> T -> TypeArguments PairFamily {T} _ _ _.
9ia68b8nProductsrc/base/construct.v (lines 270-271)Definition Product : Type -> Type -> TypeArguments NA
fp5x8226Sumsrc/base/construct.v (lines 392-395)Definition Sum : Type -> Type -> TypeArguments NA
e8s65324boolean_inductionsrc/base/primitive.v (lines 49-52)Definition boolean_induction\n  : forall (F : Boolean -> Type),\n      F yes -> F no -> forall (x : Boolean), F xArguments NA
tav7tpv0boolean_recursionsrc/base/construct.v (lines 136-141)Definition boolean_recursion\n  : forall (X : Type), X -> X -> Boolean -> XArguments boolean_recursion {X} _ _ _.
q4yy6ynmconstant_functionsrc/base/construct.v (lines 79-82)Definition constant_function : forall (X Y : Type), Y -> X -> YArguments constant_function {X Y} _ _.
g6p35mq1currysrc/base/construct.v (lines 321-332)Definition curry\n  : forall (X Y : Type) (F : Product X Y -> Type),\n      (forall (t : Product X Y), F t)\n        -> forall (x : X) (y : Y), F (pair x y)Arguments curry {X Y F} _ _ _.
qj3cqa2bequal_associativesrc/base/equal.v (lines 53-83)Definition equal_associative\n  : forall (X : Type)\n           (w x y z : X)\n           (p : Equal w x)\n           (q : Equal x y)\n           (r : Equal y z),\n      Equal (equal_compose (equal_compose p q) r)\n            (equal_compose p (equal_compose q r))Arguments equal_associative {X w x y z} p q r.
ybsrqsg4equal_composesrc/base/equal.v (lines 17-24)Definition equal_compose\n  : forall (X : Type) (x y z : X), Equal x y -> Equal y z -> Equal x zArguments equal_compose {X x y z} _ _.
npsmi0d4equal_compose_equalsrc/base/equal.v (lines 143-166)Definition equal_compose_equal\n  : forall (X : Type)\n           (x y z : X)\n           (p p' : Equal x y)\n           (q q' : Equal y z),\n      Equal p p' -> Equal q q'\n        -> Equal (equal_compose p q) (equal_compose p' q')Arguments equal_compose_equal {X x y z p p' q q'} _ _.
smege15sequal_compose_left_equalsrc/base/equal.v (lines 87-110)Definition equal_compose_left_equal\n  : forall (X : Type) (x y : X) (p p' : Equal x y),\n      Equal p p'\n        -> forall (z : X) (q : Equal y z),\n             Equal (equal_compose p q) (equal_compose p' q)Arguments equal_compose_left_equal {X x y p p'} _ {z} q.
g6ql88poequal_compose_right_equalsrc/base/equal.v (lines 114-139)Definition equal_compose_right_equal\n  : forall (X : Type)\n           (x y : X)\n           (p : Equal x y)\n           (z : X)\n           (q q' : Equal y z),\n      Equal q q' -> Equal (equal_compose p q) (equal_compose p q')Arguments equal_compose_right_equal {X x y} p {z q q'} _.
xxyabzufequal_inductionsrc/base/primitive.v (lines 86-93)Definition equal_induction\n  : forall (X : Type)\n           (x : X)\n           (F : forall (y : X), Equal x y -> Type),\n      F x (reflexive x) -> forall (y : X) (p : Equal x y), F y pArguments equal_induction {X} x F _ y p.
37wczvy0equal_inversesrc/base/equal.v (lines 174-186)Definition equal_inverse\n  : forall (X : Type) (x y : X), Equal x y -> Equal y xArguments equal_inverse {X x y} _.
omtjvraiequal_left_cancelsrc/base/equal.v (lines 315-336)Definition equal_left_cancel\n  : forall (X : Type) (x y z : X) (p : Equal x y) (q q' : Equal y z),\n      Equal (equal_compose p q) (equal_compose p q') -> Equal q q'Arguments equal_left_cancel {X x y z} p q q' _.
czd5dw60equal_left_inversesrc/base/equal.v (lines 197-212)Definition equal_left_inverse\n  : forall (X : Type) (x y : X) (p : Equal x y),\n      Equal (reflexive y) (equal_compose (equal_inverse p) p)Arguments equal_left_inverse {X x y} p.
865g4mt7equal_left_removesrc/base/equal.v (lines 340-365)Definition equal_left_remove\n  : forall (X : Type)\n           (x y : X)\n           (p p' : Equal x y),\n      Equal p p'\n        -> forall (z : X) (q q' : Equal y z),\n             Equal (equal_compose p q) (equal_compose p' q')\n               -> Equal q q'Arguments equal_left_remove {X x y p p'} _ {z} q q' _.
x71kqflrequal_left_unit_uniquesrc/base/equal.v (lines 438-444)Definition equal_left_unit_unique\n  : forall (X : Type) (x y : X) (p : Equal x x) (q : Equal x y),\n      Equal q (equal_compose p q) -> Equal (reflexive x) pArguments equal_left_unit_unique {X x y} p {q} _.
lxgjdap3equal_mapsrc/base/equal.v (lines 239-252)Definition equal_map\n  : forall (X Y : Type) (f : X -> Y) (x x' : X),\n      Equal x x' -> Equal (f x) (f x')Arguments equal_map {X Y} f {x x'} _.
5e7zp56eequal_map_inversesrc/base/equal.v (lines 291-307)Definition equal_map_inverse\n  : forall (X Y : Type) (f : X -> Y) (x x' : X) (p : Equal x x'),\n      Equal (equal_map f (equal_inverse p))\n            (equal_inverse (equal_map f p))Arguments equal_map_inverse {X Y} f {x x'} p.
bul2i30nequal_map_multiplicativesrc/base/equal.v (lines 264-287)Definition equal_map_multiplicative\n  : forall (X Y : Type)\n           (f : X -> Y)\n           (x1 x2 x3 : X)\n           (p : Equal x1 x2)\n           (q : Equal x2 x3),\n      Equal (equal_map f (equal_compose p q))\n            (equal_compose (equal_map f p) (equal_map f q))Arguments equal_map_multiplicative {X Y} f {x1 x2 x3} p q.
8gh9140hequal_right_cancelsrc/base/equal.v (lines 369-400)Definition equal_right_cancel\n  : forall (X : Type) (x y z : X) (p p' : Equal x y) (q : Equal y z),\n      Equal (equal_compose p q) (equal_compose p' q) -> Equal p p'Arguments equal_right_cancel {X x y z} p p' q _.
eay5nxerequal_right_inversesrc/base/equal.v (lines 216-231)Definition equal_right_inverse\n  : forall (X : Type) (x y : X) (p : Equal x y),\n      Equal (reflexive x) (equal_compose p (equal_inverse p))Arguments equal_right_inverse {X x y} p.
sqhuo1hfequal_right_removesrc/base/equal.v (lines 404-430)Definition equal_right_remove\n  : forall (X : Type)\n           (x y : X)\n           (p p' : Equal x y)\n           (z : X)\n           (q q' : Equal y z),\n      Equal q q'\n        -> Equal (equal_compose p q) (equal_compose p' q')\n          -> Equal p p'Arguments equal_right_remove {X x y} p p' {z} {q q'} _ _.
afizq40qequal_right_unitsrc/base/equal.v (lines 35-49)Definition equal_right_unit\n  : forall (X : Type) (x y : X) (p : Equal x y),\n      Equal p (equal_compose p (reflexive y))Arguments equal_right_unit {X x y} p.
m1jqzny4equal_right_unit_uniquesrc/base/equal.v (lines 448-467)Definition equal_right_unit_unique\n  : forall (X : Type) (x y : X) (p : Equal x y) (q : Equal y y),\n      Equal p (equal_compose p q) -> Equal (reflexive y) qArguments equal_right_unit_unique {X x y p} q _.
b79a8cj0false_inductionsrc/base/primitive.v (lines 21-23)Definition false_induction\n  : forall (F : False -> Type) (x : False), F xArguments NA
gcfsyi93false_recursionsrc/base/construct.v (lines 115-117)Definition false_recursion : forall (X : Type), False -> XArguments NA
9eptwq6kfirstsrc/base/construct.v (lines 283-286)Definition first : forall (X Y : Type), Product X Y -> XArguments first {X Y} _.
u4wjel9ofunction_composesrc/base/construct.v (lines 55-68)Definition function_compose\n  : forall (X Y : Type)\n           (G : Y -> Type)\n           (g : forall (y : Y), G y)\n           (f : X -> Y),\n      forall (x : X), G (f x)Arguments function_compose {X Y G} g f _.
jezpb6safunction_valuesrc/base/construct.v (lines 45-51)Definition function_value\n  : forall (X : Type) (F : X -> Type) (a : X),\n      (forall (x : X), F x) -> F aArguments function_value {X} {F} a _.
867thqwufunctions_equal_values_equalsrc/base/construct.v (lines 86-107)Definition functions_equal_values_equal\n  : forall (X : Type)\n           (F : X -> Type)\n           (f g : forall (x : X), F x),\n      Equal f g -> forall (x : X), Equal (f x) (g x)Arguments functions_equal_values_equal {X F f g} _ x.
ct7rwcsmidentity_functionsrc/base/construct.v (lines 72-75)Definition identity_function : forall (X : Type), X -> XArguments identity_function {X} _.
kknkg0c7leftsrc/base/construct.v (lines 399-402)Definition left : forall (X Y : Type), X -> Sum X YArguments left {X Y} _.
mblpgwu0natural_inductionsrc/base/primitive.v (lines 65-70)Definition natural_induction\n  : forall (F : Natural -> Type),\n      F zero\n        -> (forall (n : Natural), F n -> F (successor n))\n            -> forall (n : Natural), F nArguments NA
8m7c7dmlnatural_recursionsrc/base/construct.v (lines 145-150)Definition natural_recursion\n  : forall (X : Type), X -> (Natural -> X -> X) -> Natural -> XArguments natural_recursion {X} _ _ _.
yhafxlw0natural_recursion_simplesrc/base/construct.v (lines 154-159)Definition natural_recursion_simple\n  : forall (X : Type), X -> (X -> X) -> Natural -> XArguments natural_recursion_simple {X} _ _ _.
c97wzdtwpairsrc/base/construct.v (lines 275-279)Definition pair : forall (X Y : Type), X -> Y -> Product X YArguments pair {X Y} _ _.
rgjbl4r2pair_functionsrc/base/construct.v (lines 356-371)Definition pair_function\n  : forall (T : Type)\n           (F : T -> Type)\n           (G : T -> Type),\n      (forall (t : T), F t)\n        -> (forall (t : T), G t)\n          -> forall (t : T), Product (F t) (G t)Arguments  pair_function {T F G} _ _ _.
ww805vp5product_inductionsrc/base/construct.v (lines 297-307)Definition product_induction\n  : forall (X Y : Type) (F : Product X Y -> Type),\n      (forall (x : X) (y : Y), F (pair x y))\n        -> forall (t : Product X Y), F tArguments product_induction {X Y F} _ _.
wqs9857vproduct_mapsrc/base/construct.v (lines 375-384)Definition product_map\n  : forall (X Y X' Y' : Type),\n      (X -> X') -> (Y -> Y') -> Product X Y -> Product X' Y'Arguments product_map {X Y X' Y'} _ _ _.
9cz79pdmproduct_recursionsrc/base/construct.v (lines 336-343)Definition product_recursion\n  : forall (X Y Z : Type), (X -> Y -> Z) -> Product X Y -> ZArguments product_recursion {X Y Z} _ _.
ma104yeirightsrc/base/construct.v (lines 406-409)Definition right : forall (X Y : Type), Y -> Sum X YArguments right {X Y} _.
og9uqzhesecondsrc/base/construct.v (lines 290-293)Definition second : forall (X Y : Type), Product X Y -> YArguments second {X Y} _.
gewpttx0sigma_currysrc/base/construct.v (lines 232-246)Definition sigma_curry\n  : forall (X : Type)\n           (F : X -> Type)\n           (G : (Sigma (x : X), F x) -> Type),\n      (forall (t : Sigma (x : X), F x), G t)\n        -> forall (x : X) (y : F x), G (sigma F x y)Arguments sigma_curry {X F G} _ _ _.
wlyu1bpvsigma_inductionsrc/base/construct.v (lines 203-216)Definition sigma_induction\n  : forall (X : Type)\n           (F : X -> Type)\n           (G : (Sigma (x : X), F x) -> Type),\n      (forall (x : X) (y : F x), G (sigma F x y))\n        -> (forall (t : Sigma (x : X), F x), G t)Arguments sigma_induction {X F G} _ _.
siygmnhfsigma_recursionsrc/base/construct.v (lines 250-262)Definition sigma_recursion\n  : forall (X : Type)\n           (F : X -> Type)\n           (Y : Type),\n      (forall (x : X), F x -> Y) -> (Sigma (x : X), F x) -> YArguments sigma_recursion {X F} Y _ _.
dq9dzz6csigma_uncurrysrc/base/construct.v (lines 220-228)Definition sigma_uncurry\n  : forall (X : Type)\n           (F : X -> Type)\n           (G : (Sigma (x : X), F x) -> Type),\n      (forall (x : X) (y : F x), G (sigma F x y))\n        -> forall (t : Sigma (x : X), F x), G tArguments sigma_uncurry {X F G} _ _.
hrr9zb80sum_inductionsrc/base/construct.v (lines 413-434)Definition sum_induction\n  : forall (X Y : Type) (F : Sum X Y -> Type),\n      (forall (x : X), F (left x)) -> (forall (y : Y), F (right y))\n        -> forall (s : Sum X Y), F sArguments sum_induction {X Y} F _ _ s.
mrbbbxn0sum_mapsrc/base/construct.v (lines 458-470)Definition sum_map\n  : forall (X Y X' Y' : Type),\n      (X -> X') -> (Y -> Y') -> Sum X Y -> Sum X' Y'Arguments sum_map {X Y X' Y'} _ _ _.
czz2aznfsum_recursionsrc/base/construct.v (lines 438-454)Definition sum_recursion\n  : forall (X Y Z : Type), (X -> Z) -> (Y -> Z) -> Sum X Y -> ZArguments sum_recursion {X Y Z} _ _ s.
cppabof7to_truesrc/base/construct.v (lines 129-132)Definition to_true : forall (X : Type), X -> TrueArguments to_true {X} _.
szbmydj4transportsrc/base/construct.v (lines 163-179)Definition transport\n  : forall (X : Type) (F : X -> Type) (x y : X),\n      Equal x y -> F x -> F yArguments transport {X} F {x y} _ _.
xsfz3fchtransport_inversesrc/base/construct.v (lines 183-199)Definition transport_inverse\n  : forall (X : Type) (F : X -> Type) (x y : X),\n      Equal x y -> F y -> F xArguments transport_inverse {X} F {x y} _ _.
xfdlpg97true_inductionsrc/base/primitive.v (lines 35-37)Definition true_induction\n  : forall (F : True -> Type), F only -> forall (x : True), F xArguments NA
kad6krsxtrue_recursionsrc/base/construct.v (lines 121-125)Definition true_recursion : forall (X : Type), X -> True -> XArguments true_recursion {X} _ _.
e1hi7545uncurrysrc/base/construct.v (lines 311-317)Definition uncurry\n  : forall (X Y : Type) (F : Product X Y -> Type),\n      (forall (x : X) (y : Y), F (pair x y))\n        -> forall (t : Product X Y), F tArguments uncurry {X Y F} _ _.
2xu2p4rkBooleansrc/base/primitive.v (lines 45-45)Inductive Boolean : TypeArguments NA
whnabw73Equalsrc/base/primitive.v (lines 78-82)Inductive Equal (X : Type) (x : X) : X -> TypeArguments Equal {X} x  _.\nArguments reflexive {X} x.
776l3lwgFalsesrc/base/primitive.v (lines 17-17)Inductive False: TypeArguments NA
x6u83qdsNaturalsrc/base/primitive.v (lines 60-61)Inductive Natural : TypeArguments NA
815by4qcTruesrc/base/primitive.v (lines 31-31)Inductive True : TypeArguments NA
agn2f6jd_Sigmasrc/base/primitive.v (lines 101-107)Record _Sigma (X : Type) (F : X -> Type) : TypeArguments _Sigma {X} F.\nArguments sigma {X} F _ _.\nArguments sigma1 {X F} _.\nArguments sigma2 {X F} _.
497e8me5"'Sigma' x .. y , P"src/base/primitive.v (lines 111-113)Notation "'Sigma' x .. y , P"Arguments NA
ave0dtr6"X -> Y"src/base/primitive.v (lines 8-9)Notation "X -> Y"Arguments NA
zf4f204hNAsrc/base/construct.v (lines 8-8)Require Import ufcoq.base.primitive.Arguments NA
e82fgb1kNAsrc/base/equal.v (lines 8-9)Require Import ufcoq.base.primitive.\nRequire Import ufcoq.base.construct.Arguments NA
909vtogzNAsrc/base/same.v (lines 8-9)Require Import ufcoq.base.primitive.\nRequire Import ufcoq.base.construct.Arguments NA
6ly41ngr_boolean_induction_nosrc/base/same.v (lines 101-104)Example _boolean_induction_no\n  : forall (F : Boolean -> Type) (y : F yes) (n : F no),\n      Equal n (boolean_induction F y n no)Arguments NA
ogo7jox4_boolean_induction_yessrc/base/same.v (lines 94-97)Example _boolean_induction_yes\n  : forall (F : Boolean -> Type) (y : F yes) (n : F no),\n      Equal y (boolean_induction F y n yes)Arguments NA
4cga60mp_boolean_recursion_nosrc/base/same.v (lines 114-116)Example _boolean_recursion_no\n  : forall (X : Type) (y n : X), Equal n (boolean_recursion y n no)Arguments NA
2wynnkw2_boolean_recursion_yessrc/base/same.v (lines 108-110)Example _boolean_recursion_yes\n  : forall (X : Type) (y n : X), Equal y (boolean_recursion y n yes)Arguments NA
h1vgtr2g_curry_uncurrysrc/base/same.v (lines 272-280)Example _curry_uncurry\n  : forall (X Y : Type)\n           (F : Product X Y -> Type)\n           (f : forall (x : X) (y : Y), F (pair x y)),\n        Equal f (curry (uncurry f))Arguments NA
fznk9p3u_equal_induction_reflexivesrc/base/same.v (lines 189-199)Example _equal_induction_reflexive\n  : forall (X : Type)\n           (x : X)\n           (F : forall (y : X), Equal x y -> Type)\n           (e : F x (reflexive x)),\n      Equal e (equal_induction x F e x (reflexive x))Arguments NA
fehutg63_equal_inverse_reflexivesrc/base/equal.v (lines 190-193)Example _equal_inverse_reflexive\n  : forall (X : Type) (x : X),\n      Equal (reflexive x) (equal_inverse (reflexive x))Arguments NA
ky5unwbq_equal_left_unitsrc/base/equal.v (lines 28-31)Example _equal_left_unit\n  : forall (X : Type) (x y : X) (p : Equal x y),\n      Equal p (equal_compose (reflexive x) p)Arguments NA
udxkkzqg_equal_map_unitalsrc/base/equal.v (lines 256-260)Example _equal_map_unital\n  : forall (X Y : Type) (f : X -> Y) (x : X),\n      Equal (reflexive (f x)) (equal_map f (reflexive x))Arguments NA
r3y1kpvr_function_compose_associativesrc/base/same.v (lines 25-42)Example _function_compose_associative\n  : forall (W : Type)\n           (X : Type)\n           (Y : Type)\n           (G : Y -> Type)\n           (g : forall (y : Y), G y)\n           (f : X -> Y)\n           (e : W -> X),\n      Equal (function_compose (function_compose g f) e)\n            (function_compose g (function_compose f e))Arguments NA
hso05la4_function_compose_left_unitsrc/base/same.v (lines 46-50)Example _function_compose_left_unit\n  : forall (X Y : Type) (f : X -> Y),\n      Equal f (function_compose (@identity_function Y) f)Arguments NA
ey5cl868_function_compose_right_unitsrc/base/same.v (lines 54-62)Example _function_compose_right_unit\n  : forall (X : Type)\n           (G : X -> Type)\n           (g : forall (x : X), G x),\n      Equal g (function_compose  g (@identity_function X))Arguments NA
ryjyw5yo_function_eta_conversionsrc/base/same.v (lines 17-21)Example _function_eta_conversion\n  : forall (X : Type) (F : X -> Type) (f : forall (x : X), F x),\n      Equal f (fun (x : X) => f x)Arguments NA
ojb7dh9z_natural_induction_successorsrc/base/same.v (lines 136-147)Example _natural_induction_successor\n  : forall (F : Natural -> Type)\n           (z : F zero)\n           (s : forall (n : Natural), F n -> F (successor n))\n           (n : Natural),\n      Equal (s n (natural_induction F z s n))\n            (natural_induction F z s (successor n))Arguments NA
p33ig2te_natural_induction_zerosrc/base/same.v (lines 124-132)Example _natural_induction_zero\n  : forall (F : Natural -> Type)\n           (z : F zero)\n           (s : forall (n : Natural), F n -> F (successor n)),\n      Equal z (natural_induction F z s zero)Arguments NA
tsfievor_natural_recursion_simple_successorsrc/base/same.v (lines 176-181)Example _natural_recursion_simple_successor\n  : forall (X : Type) (z : X) (s : X -> X) (n : Natural),\n      Equal (s (natural_recursion_simple z s n))\n            (natural_recursion_simple z s (successor n))Arguments NA
upakg9n0_natural_recursion_simple_zerosrc/base/same.v (lines 168-172)Example _natural_recursion_simple_zero\n  : forall (X : Type) (z : X) (s : X -> X),\n      Equal z (natural_recursion_simple z s zero)Arguments NA
hrrncvpb_natural_recursion_successorsrc/base/same.v (lines 159-164)Example _natural_recursion_successor\n  : forall (X : Type) (z : X) (s : Natural -> X -> X) (n : Natural),\n      Equal (s n (natural_recursion z s n))\n            (natural_recursion z s (successor n))Arguments NA
rzfhv79d_natural_recursion_zerosrc/base/same.v (lines 151-155)Example _natural_recursion_zero\n  : forall (X : Type) (z : X) (s : Natural -> X -> X),\n      Equal z (natural_recursion z s zero)Arguments NA
rdugvrpr_pair_function_firstsrc/base/same.v (lines 296-310)Example _pair_function_first\n  : forall (T : Type)\n           (F : T -> Type)\n           (G : T -> Type)\n           (f : forall (t : T), F t)\n           (g : forall (t : T), G t)\n           (t : T),\n      Equal (f t) (first (pair_function f g t))Arguments NA
z30hsvte_pair_function_secondsrc/base/same.v (lines 314-328)Example _pair_function_second\n  : forall (T : Type)\n           (F : T -> Type)\n           (G : T -> Type)\n           (f : forall (t : T), F t)\n           (g : forall (t : T), G t)\n           (t : T),\n      Equal (g t) (second (pair_function f g t))Arguments NA
wruha80w_product_eta_conversionsrc/base/same.v (lines 264-268)Example _product_eta_conversion\n  : forall (X Y : Type) (t : Product X Y),\n      Equal t (pair (first t) (second t))Arguments NA
sh7mqmkt_product_map_firstsrc/base/same.v (lines 332-341)Example _product_map_first\n  : forall (X Y X' Y' : Type)\n           (f : X -> X')\n           (g : Y -> Y'),\n      Equal (function_compose f first)\n            (function_compose first (product_map f g))Arguments NA
2cjp777x_product_map_secondsrc/base/same.v (lines 345-354)Example _product_map_second\n  : forall (X Y X' Y' : Type)\n           (f : X -> X')\n           (g : Y -> Y'),\n      Equal (function_compose g second)\n            (function_compose second (product_map f g))Arguments NA
mrl11i2o_sigma_curry_uncurrysrc/base/same.v (lines 232-242)Example _sigma_curry_uncurry\n  : forall (X : Type)\n           (F : X -> Type)\n           (G : (Sigma (x : X), F x) -> Type)\n           (f : forall (x : X) (y : F x), G (sigma F x y)),\n      Equal f (sigma_curry (sigma_uncurry f))Arguments NA
qts05vtg_sigma_type_eta_conversionsrc/base/same.v (lines 224-228)Example _sigma_type_eta_conversion\n  : forall (X : Type) (F : X -> Type) (t : Sigma (x : X), F x),\n      Equal t (sigma F (sigma1 t) (sigma2 t))Arguments NA
4zlly4cd_sigma_uncurry_currysrc/base/same.v (lines 246-256)Example _sigma_uncurry_curry\n  : forall (X : Type)\n           (F : X -> Type)\n           (G : (Sigma (x : X), F x) -> Type)\n           (g : forall (t : Sigma (x : X), F x), G t),\n      Equal g (sigma_uncurry (sigma_curry g))Arguments NA
hut1r4st_sum_induction_leftsrc/base/same.v (lines 362-372)Example _sum_induction_left\n  : forall (X Y : Type)\n           (F : Sum X Y -> Type)\n           (f : forall (x : X), F (left x))\n           (g : forall (y : Y), F (right y)),\n      Equal f (function_compose (sum_induction F f g) left)Arguments NA
w7zh5r1a_sum_induction_rightsrc/base/same.v (lines 376-386)Example _sum_induction_right\n  : forall (X Y : Type)\n           (F : Sum X Y -> Type)\n           (f : forall (x : X), F (left x))\n           (g : forall (y : Y), F (right y)),\n      Equal g (function_compose (sum_induction F f g) right)Arguments NA
eb0iol83_sum_map_leftsrc/base/same.v (lines 414-423)Example _sum_map_left\n  : forall (X Y X' Y' : Type)\n           (f : X -> X')\n           (g : Y -> Y'),\n      Equal (function_compose left f)\n            (function_compose (sum_map f g) left)Arguments NA
minkb801_sum_map_rightsrc/base/same.v (lines 427-436)Example _sum_map_right\n  : forall (X Y X' Y' : Type)\n           (f : X -> X')\n           (g : Y -> Y'),\n      Equal (function_compose right g)\n            (function_compose (sum_map f g) right)Arguments NA
jwfgf3zw_sum_recursion_leftsrc/base/same.v (lines 390-398)Example _sum_recursion_left\n  : forall (X Y Z : Type)\n           (f : X -> Z)\n           (g : Y -> Z),\n      Equal f (function_compose (sum_recursion f g) left)Arguments NA
ll3xza2h_sum_recursion_rightsrc/base/same.v (lines 402-410)Example _sum_recursion_right\n  : forall (X Y Z : Type)\n           (f : X -> Z)\n           (g : Y -> Z),\n      Equal g (function_compose (sum_recursion f g) right)Arguments NA
qgyqpcz3_to_true_onlysrc/base/same.v (lines 84-86)Example _to_true_only\n  : forall (X : Type) (x : X), Equal only (to_true x)Arguments NA
iqo3w2uh_transport_inverse_reflexivesrc/base/same.v (lines 211-216)Example _transport_inverse_reflexive\n  : forall (X : Type) (F : X -> Type) (x y : X),\n      Equal (@identity_function (F x))\n            (transport_inverse F (reflexive x))Arguments NA
obnor2k3_transport_reflexivesrc/base/same.v (lines 203-207)Example _transport_reflexive\n  : forall (X : Type) (F : X -> Type) (x y : X),\n      Equal (@identity_function (F x)) (transport F (reflexive x))Arguments NA
tuh9sgix_true_induction_onlysrc/base/same.v (lines 70-74)Example _true_induction_only\n  : forall (F : True -> Type) (x : F only),\n      Equal x (true_induction F x only)Arguments NA
iww5ck0g_true_recursion_onlysrc/base/same.v (lines 78-80)Example _true_recursion_only\n  : forall (X : Type) (x : X), Equal x (true_recursion x only)Arguments NA
u70g12vv_uncurry_currysrc/base/same.v (lines 284-292)Example _uncurry_curry\n  : forall (X Y : Type)\n           (F : Product X Y -> Type)\n           (g : forall (t : Product X Y), F t),\n      Equal g (uncurry (curry g))Arguments NA
